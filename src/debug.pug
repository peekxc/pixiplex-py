doctype html
head
	meta(charset='utf-8')
	title d3 webGL force graph with PIXI.js
	meta(name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
	meta(name='description' content='')
	meta(name='theme-color' content='#000000')
body
	//- div(
	//- 	id="pixir_container" style="position: relative; overflow: hidden; overflow-y: hidden; padding: 0; margin: 0; width: 1200px; height: 800px;"
	//- )
	script(type="module").
		import * as pn from "./pixinet.js"

		//- let canvas = document.createElement("canvas");
		//- canvas.width = 1200;
		//- canvas.height = 800;
		//- console.log(canvas.height);
		let res = 1.0;
		const app = await new pn.Application();
		await app.init({ 
			autoResize: false, 
			background: 0xededed,
			autoStart: false,
			transparent: false, 
			resolution: res, 
			antialias: true, 
			forceCanvas: false,
		});
		console.log(app)

		let canvas = app.canvas
		console.log(canvas)
		app.renderer.resize(1200,800,res)
		canvas.width = 1200;
		canvas.height = 800;
		canvas.onwheel = function(event){ event.preventDefault(); };
		canvas.onmousewheel = function(event){ event.preventDefault(); };



		console.log(canvas.height);
		document.body.appendChild(canvas);
		console.log(canvas.height);
		//- const app = new PIXI.Application();
		//- document.body.appendChild(app.view);

		// create viewport
		console.log(app.canvas)
		console.log(canvas.height);
		let viewport = new pn.Viewport({
			//- screenWidth: canvas.width,
			//- screenHeight: canvas.height,
			worldWidth: canvas.width,
			worldHeight: canvas.height,
			passiveWheel: false, 
			events: app.renderer.events, // the interaction module is important for wheel to work properly when renderer.view is placed or scaled
		});
		viewport.drag().wheel(1e-3).decelerate();
		viewport.fit()
		console.log(viewport);
		console.log(canvas.height);

		// Construct some random nodes
		let node_context = new pn.GraphicsContext()
			.circle(0, 0, 6)
			.stroke({ width: 1.5, color: 0xFFFFFF })
			.fill({ color: 0x650A5A });
		
		// Add the nodes to the stage
		for (let i = 0; i < 300; i++){
			let node = new pn.Graphics(node_context);
			node.x = Math.random() * app.renderer.width; 
			node.y = Math.random() * app.renderer.height; 
			viewport.addChild(node);
		}

		// This should be at the center of the viewport!
		let node_c = new pn.Graphics()
			.circle(0, 0, 6)
			.stroke({ width: 1.5, color: 0xFFFFFF })
			.fill({color: 0x000000 });
		node_c.x = 600; 
		node_c.y = 400; 
		viewport.addChild(node_c);

		console.log(canvas.height);
		app.stage.addChild(viewport);
		app.start();
		viewport.moveCenter(600, 400); // <- this doesnt work
		console.log(canvas.height);
		console.log(app)

