doctype html
head
	meta(charset='utf-8')
	title d3 webGL force graph with PIXI.js
	meta(name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
	meta(name='description' content='')
	meta(name='theme-color' content='#000000')
body
	button(id="center_button" type="button") Center
	div 
		button(id="init_force_button" type="button") Initialize force
		button(id="enable_force_button" type="button") Enable force
		button(id="disable_force_button" type="button") Disable forces
	div 
		button(id="enable_drag_button" type="button") Enable drag
		button(id="disable_drag_button" type="button") Disable drag
	div 
		button(id="change_node_color_button" type="button") Change node color
		button(id="change_node_colors_button" type="button") Change node colors
		button(id="change_node_radius_button" type="button") Change node radius
		button(id="change_node_radii_button" type="button") Change node radii
		button(id="change_link_width_button" type="button") Change link width
		button(id="change_link_color_button" type="button") Change link color
	div 
		button(id="insert_node_button" type="button") Insert node
		button(id="remove_node_button" type="button") Remove node
		button(id="insert_link_button" type="button") Insert link
		button(id="remove_link_button" type="button") Remove link
		button(id="insert_polygon_button" type="button") Insert polygon
		button(id="remove_polygon_button" type="button") Remove polygon
		button(id="add_text" type="button") Add node text 
	div 
		button(id="lasso_button" type="button") Do Lasso
		button(id="enable_weak_tree" type="button") Enable weak tree
	
	//- width: 1200px; height: 800px;
	div(
		id="pixir_container" style="position: relative; overflow: hidden; overflow-y: hidden; padding: 0; margin: 5px; border: 1px solid black; "
	)
//- script(src='./pixinet.js' type="module")
//- script(src='pixiplex.min.js')
//- script(src="https://d3js.org/d3.v4.min.js")
//- script(src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/8.3.4/pixi.min.js" integrity="sha512-1TUvvqMWHCdVdlcys5WCmi8eu2esAcwwIXxinh5zmuQ1LNAVsm6y2QAFeuyyYUrCVsa+SnTFFPr3h2wfxaFuHg==" crossorigin="anonymous" referrerpolicy="no-referrer")
//- script(src="https://d3js.org/d3-fetch.v1.min.js")
//- script(src="https://d3js.org/d3-color.v1.min.js")
//- script(src="https://d3js.org/d3-interpolate.v1.min.js")
//- script(src="https://d3js.org/d3-scale-chromatic.v1.min.js")
//- script(src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js")
//- script(type="text/javascript").
script(type="module").
	import * as pn from "./pixinet.js"
	console.log("pixinet module: ", pn)
	console.log("Pixel ratio: " + devicePixelRatio)
	
	// Setup bordered container to house the canvas for debugging
	//- let pn_cont = document.getElementById("pixir_container")

	// Construct the instance 
	const pp = new pn.Pixiplex(1200, 800);
	//- pp.view.height = 800;
	
	// Initializations
	await pp.initialize_application()
	pp.initialize_viewport();
	pp.init_ticker();
	//- pn_cont.appendChild(pp.view);

	// Yeah, pixi-viewport is just not correct
	console.log(pp)
	
	//- console.log("canvas: ", pp.app.renderer.canvas)
	//- pp.app.renderer.canvas.style.setProperty('border', "1 px black")
	//- pp.app.renderer.canvas.style.setProperty('margin', "5 px")
	//- pp.app.renderer.canvas.style.setProperty('width', '1200px')
	//- pp.app.renderer.canvas.style.setProperty('height', '800px')
	console.log("canvas: ", pp.app.renderer.canvas)
	document.body.appendChild(pp.app.renderer.canvas)
	console.log("canvas: ", pp.app.renderer.canvas)

	// Enable dynamic resizing
	//- const resize = pn.enable_resize(pp.app, pp.vp);
	//- window.addEventListener('resize', resize); 	// Listen for window resize events
	//- resize();

	// Loads the graph, initializes the graphics (+ nodes w/ random coordinates)
	await pp.initialize_graph("data/les_miserables.json");

	// Add the graphics into the viewport; note viewport *is* a container
	pn.add_items(pp.vp, [pp.links_gfx]); // add links to stage
	pn.add_items(pp.vp, pp.nodes_gfx);   // add nodes to stage
	

	pp.ticker.add((ticker) => {
		pn.update_links(pp.links, pp.links_gfx);
	});
	
	// Finally, add the viewport itself to the stage 
	pp.app.stage.addChild(pp.vp)

	// Start the animation
	console.log("beginning ticker");
	pp.ticker.start();

	console.log("pixiplex: ", pp)


	// Add event listeners to buttons	

	document.getElementById("init_force_button").addEventListener("click", function(){
		pp.init_force();
	});
	document.getElementById("enable_force_button").addEventListener("click", function(){
		pp.enable_force();
	});
	document.getElementById("disable_force_button").addEventListener("click", function(){
		pp.disable_force();
	});

	document.getElementById("center_button").addEventListener("click", function(){
		//- pp.vp.moveCenter(pp.width/2, pp.height/2);
		//- pp.vp.scaled = 1;
		let node = new pn.Graphics()
			.circle(0, 0, 10)
			.stroke({ width: 3, color: 0xffffff })
			.fill({ color: 0xff0000, alpha: 1.0})
		;
		pp.vp.addChild(node);


		const c_x = pp.vp.worldWidth / 2; 
		const c_y = pp.vp.worldHeight / 2;

		const br = 2*c_y; // bottom right corner; 

		let node2 = new pn.Graphics()
			.circle(c_x, c_y, 10)
			.stroke({ width: 3, color: 0xffffff })
			.fill({ color: 0x000000, alpha: 1.0})
		;
		pp.vp.addChild(node2);
		pp.vp.fit(false);
		//- pp.vp.moveCenter(2*c_x, 2*c_y);
		pp.vp.moveCorner(2*c_x, 2*c_y);
		//- pp.center_viewport();
	});

	

	document.getElementById("enable_drag_button").addEventListener("click", function(){
		console.log("enabling drag")
		pp.enable_drag();
		//- console.log(ticker)
	});
	document.getElementById("disable_drag_button").addEventListener("click", function(){
		console.log("disabling drag")
		pp.disable_drag();
	});
	
	document.getElementById("change_node_color_button").addEventListener("click", function(){
		console.log("changing node color");
		pp.node_style.color = 0xFF7518;
		pp.node_style.radius = 8;
		pn.build_nodes(pp.nodes_gfx, pp.node_style);
	});

	document.getElementById("change_node_colors_button").addEventListener("click", function(){
		console.log("changing node colors");
		const ns = pp.node_style;
		pp.node_style = _.map(pp.nodes, (node, i) => ({ 
			...ns, 
			color: i % 2 == 0 ? 0xff7518 : 0x650A5A, 
		}));
		//- console.log(pp.node_style);
		pn.build_nodes(pp.nodes_gfx, pp.node_style)
	});

	document.getElementById("change_node_radius_button").addEventListener("click", function(){
		console.log("changing node radius");
		//- console.log(pp.nodes_gfx.slice(0, pp.nodes.length / 2))
		pn.build_nodes(pp.nodes_gfx.slice(0, pp.nodes.length / 2), { radius: 10 });
		pn.build_nodes(pp.nodes_gfx.slice(pp.nodes.length / 2), { radius: 5 });
	});

	document.getElementById("change_node_radii_button").addEventListener("click", function(){
		console.log("changing node radii");
		pn.build_nodes(pp.nodes_gfx, { radius: 10 })
	});

	document.getElementById("change_link_width_button").addEventListener("click", function(){
		console.log("changing link width");
		//- pn.build_nodes([pp.link_gfx], { radius: 10 })
	});

	document.getElementById("change_link_color_button").addEventListener("click", function(){
		console.log("changing node radii");
		//- pn.build_nodes(pp.nodes_gfx, { radius: 10 })
	});

	//- // Start lasso on double-click 
	//- let lasso_obj = pn.enable_lasso("pixir_container");
	//- lasso_obj.on("selected", function(nodes){
	//- 		// Highlight selected nodes 
	//- 		//- if (nodes) { 
	//- 		//- 	pn.draw_nodes(nodes, { color: 0xFFA500 });
				
	//- 		//- 	let node_container = pn.group_items(nodes);
	//- 		//- 	pn.stage_items(vp, [node_container]);
	//- 		//- 	let node_group = pn.enable_drag_container(node_container);
	//- 		//- 	console.log(node_group);
	//- 		//- 	pn.enable_drag(node_group).on("dragging", function(coords){
	//- 		//- 		console.log(this);
	//- 		//- 		this.x = coords.x; this.y = coords.y; 
	//- 		//- 		this.updateTransform();
	//- 		//- 	});

	//- 		//- 	//pn.enable_drag(node_group)
	//- 		//- };
	//- 		// Drag -- or -- do something else w/ selected nodes 
	//- 		// unhighlight nodes when finished  
	//- });


	//- document.getElementById("lasso_button").addEventListener("click", function(){
	//- 	console.log("lasso clicked")
	//- 	console.log(lasso_obj);
	//- 	console.log(nodes);
	//- 	lasso_obj.call("start", this, nodes);
	//- 	// var interact_svg = pn.enable_lasso("pixir_container");
	//- 	// var selected_nodes = pn.start_lasso(nodes, interact_svg);
	//- });

	//- document.getElementById("insert_node_button").addEventListener("click", function(){
	//- 	console.log("inserting new node");
	//- 	let new_nodes = [{id: "new_node", group: 5, x: 0.5, y: 0.5}]; 
	//- 	let ins_nodes = pn.differenceBy(new_nodes, nodes, 'id');
	//- 	ins_nodes = pn.generate_node_graphics(pn.scale_nodes(ins_nodes, width, height));
	//- 	ins_nodes.forEach((node) => {
	//- 		pn.compose(
	//- 			pn.pixi_drag(node), 
	//- 			sim ? pn.force_drag(sim) : pn.identity,
	//- 			((typeof HTMLWidgets !== 'undefined') && HTMLWidgets.shinyMode) ? pn.shiny_drag(Shiny) : pn.identity
	//- 		)(pn.drag_dispatcher(node));
	//- 	});
	//- 	pn.stage_items(vp, ins_nodes);
	//- 	nodes = pn.concat(nodes, ins_nodes);
	//- 	if (sim){ sim.nodes(nodes); }
	//- });
	//- document.getElementById("remove_node_button").addEventListener("click", function(){
	//- 	console.log("remove new node");
	//- 	let node_ids = [nodes[0].id, nodes[1].id]
	//- 	pn.remove_nodes(node_ids, nodes, links, vp);
	
	//- 	// Update simulation after any removal or addition
	//- 	if (sim){ 
	//- 		sim.nodes(nodes); 
	//- 		if (sim.force('link')){	sim.force('link').links(links); }
	//- 	}
	//- });
	//- document.getElementById("insert_link_button").addEventListener("click", function(){
	//- 	let new_links = [{ source: "Labarre", target: "Mabeuf" }];
	//- 	pn.resolve_links(nodes, new_links); // attach source + target
	//- 	links = pn.concat(links, new_links);
	//- 	if (sim && sim.force('link')){ sim.force('link').links(links); }
	//- });
	//- document.getElementById("remove_link_button").addEventListener("click", function(){
	//- 	let links_to_remove = [{ source: "Labarre", target: "Mabeuf" }];
	//- 	// This probably has to be O(n^2) without further sorting 
	//- 	pn.remove(links, (link) => {
	//- 		let tmp = links_to_remove.find((o) => { return link.source.id == o.source && link.target.id == o.target });
	//- 		return (typeof tmp !== 'undefined')
	//- 	});
	//- 	if (sim && sim.force('link')){ sim.force('link').links(links); }
	//- });
	//- document.getElementById("insert_polygon_button").addEventListener("click", function(){
	//- 	console.log("Inserting polygon");
	//- 	let cpoly = new Polygon();
	//- 	cpoly.gfx = new Graphics();
	//- 	cpoly.nodes = [nodes[0], nodes[1], nodes[2]];
	//- 	console.log(cpoly);

	//- 	// Add to stage, update on ticker
	//- 	pn.stage_items(vp, [cpoly.gfx]);
	//- 	if (!polygons){ polygons = []; }
	//- 	polygons.push(cpoly);
	//- });

	//- document.getElementById("remove_polygon_button").addEventListener("click", function(){
	//- });

	
	//- document.getElementById("change_node_radius_button").addEventListener("click", function(){
	//- 	pn.draw_nodes(nodes, { radius: 2 });
	//- });
	//- document.getElementById("change_link_width").addEventListener("click", function(){
	//- 	pn.draw_links(links, links_gfx, { lineWidth: 5 })
	//- });
	//- document.getElementById("change_link_color").addEventListener("click", function(){
	//- 	console.log("Changing link color");
	//- 	pn.draw_links(links, links_gfx, { color: 0xff0000 })
	//- });

	document.getElementById("enable_weak_tree").addEventListener("click", function(){
		pp.dispatcher.on("tick", function(e){
			//- links_gfx.clear();
			//- pn.draw_links(links, links_gfx);	

			// Form weak tree by push targets downward
			let k = 10 * pp.sim.alpha();
			pp.links.forEach((link) => { 
				link.source.y -= k;
				link.target.y += k;  
			});
			sim.tick();
		});
	});

	//- document.getElementById("add_text").addEventListener("click", function(){
	//- 	nodes.forEach((node) => {
	//- 		let text = new Text('Text',{fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'});
	//- 		node.addChild(text);
	//- 		//- text.position.x = function() { return node.x }
	//- 		//- text.position.y = function() { return node.y }
	//- 		//- vp.addChild(text);
	//- 	});
	//- 	console.log(nodes[0]);

	//- });

		// Add the viewport as a child of a container itself
	//- let cn = new pn.Container();
	//- cn.addChild(pp.vp);
	//- //- cn.cacheAsTexture();
	//- //- cn.enableRenderGroup();
	//- //- cn.cacheAsTexture = true; 
	//- pn.add_items(pp.app.stage, [cn])